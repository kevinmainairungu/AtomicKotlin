type: edu
custom_name: Exercise 2
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 50
    length: 20
    placeholder_text: // add Boring2 class
    initial_state:
      length: 20
      offset: 50
    initialized_from_dependency: false
    possible_answer: |-
      class Boring2(val a: Double, val b: String, val c: Int) {
        fun a() = a
        fun b() = b
        fun c() = c
      }
    selected: false
    status: Unchecked
  - offset: 87
    length: 22
    placeholder_text: TODO() // test Boring2
    initial_state:
      length: 22
      offset: 87
    initialized_from_dependency: false
    possible_answer: |-
      val boring2 = Boring2(1.0, "abc", 3)
        boring2.a() eq 1.0
        boring2.b() eq "abc"
        boring2.c() eq 3
    selected: false
    status: Unchecked
  text: |-
    package summaryIIExercise2

    import atomictest.eq

    // add Boring2 class

    fun main() {
      TODO() // test Boring2
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package summaryIIExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.full.primaryConstructor

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSummaryIIExercise2 {
      @Test(timeout = TIMEOUT)
      fun test1Functions() {
        val boringClass = loadClass("summaryIIExercise2", "Boring2")
        val aFunction = loadMemberFunction(boringClass, "a")
        val bFunction = loadMemberFunction(boringClass, "b")
        val cFunction = loadMemberFunction(boringClass, "c")
        val constructor = boringClass.primaryConstructor
          ?: throw AssertionError("The Boring2 class doesn't have a primary constructor")
        Assert.assertEquals("The Boring2 primary constructor should have 3 parameters",
          3, constructor.parameters.size)
        checkParametersOfConstructor(constructor, boringClass,
          listOf("" to "kotlin.Double", "" to "kotlin.String", "" to "kotlin.Int"))

        val instance = constructor.call(6.0, "abc", 55)
        fun message(fName: String, value: String) =
          "The '$fName()' function should return $value for 'Boring2(6.0, \"abc\", 55)'"
        Assert.assertEquals(message("a", "6.0"), 6.0, aFunction.call(instance))
        Assert.assertEquals(message("b", "abc"), "abc", bFunction.call(instance))
        Assert.assertEquals(message("c", "55"), 55, cFunction.call(instance))
      }

      @Test(timeout = TIMEOUT)
      fun test2Main() {
        val output = runAndGetSystemOutput(::main)
        Assert.assertTrue("Expected some tests on 'Boring2'", output.isNotEmpty())
      }
    }
  learner_created: false
status: Unchecked
record: -1
