type: edu
custom_name: Exercise 2
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 163
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 163
    initialized_from_dependency: false
    possible_answer: return (2 until i).filter { i % it == 0 }
    selected: false
    status: Unchecked
  - offset: 204
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 204
    initialized_from_dependency: false
    possible_answer: return this != 1 && getNonTrivialDivisors(this).isEmpty()
    selected: false
    status: Unchecked
  - offset: 249
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 249
    initialized_from_dependency: false
    possible_answer: return i != 1 && 1 + getNonTrivialDivisors(i).sum() == i
    selected: false
    status: Unchecked
  - offset: 320
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 320
    initialized_from_dependency: false
    possible_answer: Int::isEven
    selected: false
    status: Unchecked
  - offset: 375
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 375
    initialized_from_dependency: false
    possible_answer: Int::isPrime
    selected: false
    status: Unchecked
  - offset: 532
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 532
    initialized_from_dependency: false
    possible_answer: ::isPerfect
    selected: false
    status: Unchecked
  text: |-
    package memberReferencesExercise2

    import atomictest.eq

    val Int.isEven: Boolean
      get() = this % 2 == 0

    private fun getNonTrivialDivisors(i: Int): List<Int> {
      TODO()
    }

    fun Int.isPrime(): Boolean {
      TODO()
    }

    fun isPerfect(i: Int): Boolean {
      TODO()
    }

    fun main() {
      val range = 1..1000
      val even = range.filter(TODO())
      even.size eq 500

      val prime = range.filter(TODO())
      prime.take(7) eq listOf(2, 3, 5, 7, 11, 13, 17)
      prime.takeLast(7) eq
        listOf(953, 967, 971, 977, 983, 991, 997)

      val perfect = range.filter(TODO())
      perfect eq listOf(6, 28, 496)
      // 6 = 1 + 2 + 3
      // 28 = 1 + 2 + 4 + 7 + 14
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package memberReferencesExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestMemberReferencesExercise2 {
      @Test(timeout = TIMEOUT)
      fun test1Sample() {
        val range = 1..1000
        val even = range.filter(/*<taskWindow>*/Int::isEven/*</taskWindow>*/)
        Assert.assertEquals("Wrong result for `even` collection:", 500, even.size)

        val prime = range.filter(/*<taskWindow>*/Int::isPrime/*</taskWindow>*/)
        Assert.assertEquals("Wrong result for `prime` collection:",
          listOf(953, 967, 971, 977, 983, 991, 997), prime.takeLast(7))

        val perfect = range.filter(/*<taskWindow>*/::isPerfect/*</taskWindow>*/)
        Assert.assertEquals("Wrong result for `perfect` collection:",
          listOf(6, 28, 496), perfect)

      }

      private fun testPrime(i: Int, isPrime: Boolean) {
        Assert.assertEquals("The number $i ${if (isPrime) "should" else "shouldn't"} be prime", isPrime, i.isPrime())
      }

      @Test(timeout = TIMEOUT)
      fun test2Prime() {
        testPrime(2, true)
        testPrime(5, true)
        testPrime(1861, true)
        testPrime(2399, true)
        testPrime(5569, true)
        testPrime(6737, true)
        testPrime(12007, true)

        testPrime(1, false)
        testPrime(10, false)
        testPrime(2397, false)
        testPrime(6739, false)
      }

      @Test(timeout = TIMEOUT)
      fun test3Perfect() {
        val i = 8128
        Assert.assertTrue("The number $i should be perfect", isPerfect(i))
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Member+References+%2F+Exercise2
status: Unchecked
record: -1
