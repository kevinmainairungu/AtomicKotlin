type: edu
custom_name: Exercise 1
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 126
    length: 78
    placeholder_text: |-
      x.let {
          it.first = 1
          it.second = 2
          it.third = 3
        }
        return "let"
    initial_state:
      length: 78
      offset: 126
    initialized_from_dependency: false
    possible_answer: |-
      with(x) {
          first = 1
          second = 2
          third = 3
        }
        return "with"
    selected: false
    status: Unchecked
  - offset: 288
    length: 84
    placeholder_text: |-
      y?.let {
          with(it) {
            start()
            finish()
          }
        }
        return "let & with"
    initial_state:
      length: 84
      offset: 288
    initialized_from_dependency: false
    possible_answer: |-
      y?.run {
          start()
          finish()
        }
        return "run"
    selected: false
    status: Unchecked
  - offset: 436
    length: 62
    placeholder_text: |-
      val result = with(z) {
          init()
          this
        }
        return "with"
    initial_state:
      length: 62
      offset: 436
    initialized_from_dependency: false
    possible_answer: |-
      val result = z.apply {
          init()
        }
        println(result)
        return "apply"
    selected: false
    status: Unchecked
  text: |-
    package scopeFunctionsExercise1

    class X {
      var first = 0
      var second = 0
      var third = 0
    }

    fun example1(x: X): String {
      x.let {
        it.first = 1
        it.second = 2
        it.third = 3
      }
      return "let"
    }

    class Y {
      fun start() {}
      fun finish() {}
    }

    fun example2(y: Y?): String {
      y?.let {
        with(it) {
          start()
          finish()
        }
      }
      return "let & with"
    }

    class Z {
      fun init() {}
    }

    fun example3(z: Z): String {
      val result = with(z) {
        init()
        this
      }
      return "with"
    }

    fun main() {
      example1(X())
      example2(Y())
      example3(Z())
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package scopeFunctionsExercise1

    import org.junit.Assert
    import org.junit.Test
    import util.TIMEOUT

    class TestScopeFunctionsExercise1 {
      private fun checkResult(result: String, funcName: String, vararg possibleAnswers: String) {
        val message = "${possibleAnswers.joinToString()} " +
          "fit${if (possibleAnswers.size == 1) "s" else ""} " +
          "better for '$funcName' use-case"
        Assert.assertTrue(message,
          possibleAnswers.any { result.contains(it) }
        )
      }

      @Test(timeout = TIMEOUT)
      fun test1() = checkResult(example1(X()), "example1", "with", "run", "apply")

      @Test(timeout = TIMEOUT)
      fun test2() = checkResult(example2(Y()), "example2", "run", "apply")

      @Test(timeout = TIMEOUT)
      fun test3() = checkResult(example3(Z()), "example3", "apply")

    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Library+Helpers+%2F+Exercise1
status: Unchecked
record: -1
