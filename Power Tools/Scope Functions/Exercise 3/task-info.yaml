type: edu
custom_name: Exercise 3
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 314
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 314
    initialized_from_dependency: false
    possible_answer: |-
      return list
          .filter { it % 2 == 1 }
          .map { it * it }
          .run { subList(1, size) }
    selected: false
    status: Unchecked
  text: |-
    package scopeFunctionsExercise3

    import atomictest.eq

    fun transformVersion1(list: List<Int>): List<Int> {
      val intermediateResult = list
        .filter { it % 2 == 1 }
        .map { it * it }
      return intermediateResult.subList(
        1, intermediateResult.size)
    }

    fun transformVersion2(list: List<Int>): List<Int> {
      TODO()
    }

    fun main() {
      transformVersion1(listOf(1, 2, 3, 4, 5)) eq listOf(9, 25)
      transformVersion2(listOf(1, 2, 3, 4, 5)) eq listOf(9, 25)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package scopeFunctionsExercise3

    import org.junit.Assert
    import org.junit.Test
    import util.TIMEOUT

    class TestScopeFunctionsExercise3 {
      @Test(timeout = TIMEOUT)
      fun testSample() {
        val list = listOf(1, 2, 3, 4, 5)
        val result = listOf(9, 25)
        Assert.assertEquals("Wrong result for $list:",
          transformVersion2(list), result)
      }

      @Test(timeout = TIMEOUT)
      fun testOtherExample() {
        val list = listOf(24, 12, 9, 13, 15)
        val result = listOf(169, 225)
        Assert.assertEquals("Wrong result for $list:",
          transformVersion2(list), result)
      }
    }
  learner_created: false
status: Unchecked
record: -1
